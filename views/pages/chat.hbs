<div style="display: flex; flex-direction: column; align-items: center; justify-content: center; min-height: 100vh; 
    font-family:'DynaPuff', cursive; font-size: 100%;">

    <div style="position: fixed; top: 0px; left: 0; width: 100%; height: 100%;
        background-color: #ffefda; z-index: -3;">
    </div>

    <!-- Corner Images -->
    <img src="/images/SSmoon.png" style="position: fixed; top: 0; left: 0; width: 25%; height: 25%; z-index: -2;">
    <img src="/images/SSleafblob.png" style="position: fixed; top: 0; right: 0; width: 25%; height: 25%; z-index: -2;">
    <img src="/images/SSstarblob.png" style="position: fixed; bottom: 0; left: 0; width: 25%; height: 25%; z-index: -2;">
    <img src="/images/SSmoon.png" style="position: fixed; bottom: 0; right: 0; width: 25%; height: 25%; z-index: -2; transform: rotate(180deg);">

    <h1 style="color: #190400; font-size: 3em; text-shadow: 2px 2px 5px rgba(0,0,0,0.5);">Chat Room</h1>

    <!-- TTS Controls -->
    <div style="margin-bottom: 10px; display: flex; align-items: center; gap: 10px;">
        <label style="font-size: 18px; color: #190400;">
            <input type="checkbox" id="tts-toggle" style="margin-right: 5px;">
            Read responses aloud
        </label>
        <select id="voice-select" style="font-size: 16px; font-family: 'DynaPuff';">
            <option value="">Default voice</option>
        </select>
    </div>

    <!-- Chat window -->
    <div id="chat-container" style="width: 60%; display: flex; flex-direction: column; align-items: stretch;">
        <div id="chat-messages" style="height: 400px; background-color: #f3d3b3; border: 3px solid #190400; border-radius: 10px; 
            box-shadow: 0px 4px 8px rgba(0,0,0,0.2); overflow-y: auto; padding: 20px; display: flex; flex-direction: column; position: relative;">
            <p style="color: #555;">Start chatting...</p>
        </div>

        <!-- Input + Send + Voice -->
        <div style="display: flex; margin-top: 20px;" id="input-section">
            <input type="text" id="user-input" placeholder="Type a message..." 
                style="flex: 1; padding: 10px; font-size: 16px; font-family:'DynaPuff'; border-radius: 5px; border: 1px solid #08080a;background-color: #f3d3b3;">
            <button id="send-btn" style="margin-left: 10px; padding: 10px 20px; font-family:'DynaPuff', cursive; font-size: 16px; background-color: #32b5c6; 
                color: #ffefda; border-radius: 5px; border: 1px solid #08080a; cursor: pointer;">Send</button>
            <button id="voice-btn" title="Speak" style="margin-left: 10px; padding: 10px; font-family: 'DynaPuff', cursive;
                font-size: 16px; background-color: #fa8072; color: #ffefda; border-radius: 5px; border: 1px solid #08080a; cursor: pointer;">🎤
            </button>
        </div>
    </div>

    <!-- Fullscreen toggle -->
    <button id="fullscreen-toggle" style="position: fixed; bottom: 20px; right: 20px; padding: 5px 10px;
        font-size: 14px; background-color: #190400; color: #ffefda; border: none; border-radius: 5px; cursor: pointer; z-index: 1001;">
        ⛶
    </button>
</div>

<script>
const chatMessages = document.getElementById("chat-messages");
const fullscreenBtn = document.getElementById("fullscreen-toggle");
const chatContainer = document.getElementById("chat-container");
let isFullScreen = false;

fullscreenBtn.addEventListener("click", () => {
    if (!isFullScreen) {
        chatContainer.style.position = "fixed";
        chatContainer.style.top = "0";
        chatContainer.style.left = "0";
        chatContainer.style.width = "100vw";
        chatContainer.style.height = "100vh";
        chatContainer.style.zIndex = "1000";
        chatContainer.style.backgroundColor = "#f3d3b3";
        chatContainer.style.padding = "20px";
        chatContainer.style.borderRadius = "0";
        chatContainer.style.boxSizing = "border-box";

        chatMessages.style.flex = "1";
        chatMessages.style.height = "auto";

        fullscreenBtn.textContent = "ⓧ";
        isFullScreen = true;
    } else {
        chatContainer.style.position = "relative";
        chatContainer.style.width = "60%";
        chatContainer.style.height = "auto";
        chatContainer.style.zIndex = "";
        chatContainer.style.top = "";
        chatContainer.style.left = "";
        chatContainer.style.borderRadius = "";

        chatMessages.style.height = "400px";

        fullscreenBtn.textContent = "⛶";
        isFullScreen = false;
    }
});

// Voice dropdown
let voices = [];
function populateVoiceList() {
    voices = speechSynthesis.getVoices();
    const voiceSelect = document.getElementById("voice-select");
    voiceSelect.innerHTML = '<option value="">Default voice</option>';
    voices.forEach((voice, index) => {
        const option = document.createElement("option");
        option.value = index;
        option.textContent = `${voice.name} (${voice.lang})${voice.default ? ' — Default' : ''}`;
        voiceSelect.appendChild(option);
    });
}
if (typeof speechSynthesis !== "undefined") {
    speechSynthesis.onvoiceschanged = populateVoiceList;
    populateVoiceList(); // Fallback if voices already loaded
}

document.getElementById("send-btn").addEventListener("click", async () => {
    const userInput = document.getElementById("user-input").value;
    if (!userInput) return;

    const userMessage = document.createElement("div");
    userMessage.textContent = userInput;
    userMessage.style.cssText = "align-self: flex-end; background-color: #3498db; color: white; padding: 10px; border-radius: 10px; margin: 5px; max-width: 60%;";
    chatMessages.appendChild(userMessage);

    document.getElementById("user-input").value = "";

    const response = await fetch("/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: userInput }),
    });

    const data = await response.json();

    const botMessage = document.createElement("div");
    botMessage.textContent = data.reply;
    botMessage.style.cssText = "align-self: flex-start; background-color: #ecf0f1; color: black; padding: 10px; border-radius: 10px; margin: 5px; max-width: 60%;";
    chatMessages.appendChild(botMessage);

    // TTS
    const ttsToggle = document.getElementById("tts-toggle");
    const voiceSelect = document.getElementById("voice-select");
    if (ttsToggle.checked && 'speechSynthesis' in window) {
        speechSynthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(data.reply);
        utterance.lang = 'en-US';
        const selectedVoice = voices[voiceSelect.value];
        if (selectedVoice) utterance.voice = selectedVoice;
        speechSynthesis.speak(utterance);
    }

    chatMessages.scrollTop = chatMessages.scrollHeight;
});

document.addEventListener("keydown", (event) => {
    if (event.key === "Enter") {
        event.preventDefault();
        document.getElementById("send-btn").click();
    }
    if (event.key === "Escape" && isFullScreen) {
        fullscreenBtn.click();
    }
});
</script>

<!-- Voice recognition -->
<script>
const voiceBtn = document.getElementById("voice-btn");
const userInputField = document.getElementById("user-input");

let recognition;
if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.continuous = false;
    recognition.lang = 'en-US';
    recognition.interimResults = false;

    recognition.onstart = () => { voiceBtn.textContent = "🎙️ Listening..."; };
    recognition.onend = () => { voiceBtn.textContent = "🎤"; };
    recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        userInputField.value = transcript;
    };
} else {
    voiceBtn.disabled = true;
    voiceBtn.textContent = "🚫";
    voiceBtn.title = "Speech recognition not supported in this browser";
}

voiceBtn.addEventListener("click", () => {
    if (recognition) recognition.start();
});
</script>
